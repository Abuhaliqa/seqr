#!/usr/bin/env python2.7

import argparse
import logging
import os
import sys

from utils.deploy_utils import deploy
from utils.seqrctl_utils import print_log, port_forward, exec_command, create_user, load_example_project

logging.basicConfig(stream=sys.stdout, format='%(asctime)s %(levelname)-8s %(message)s', level=logging.INFO)
logger = logging.getLogger()

DEPLOYMENT_LABELS = ["local", "gcloud"]
DEPLOYABLE_RESOURCES = ['postgres', 'phenotips', 'mongo', 'seqr']
PORTS = {
    'postgres': 5432,
    'phenotips': 8080,
    'mongo': 27017,
    'seqr': 8000,
}


DEPLOY_COMMAND_SYNONYMS = [ 'deploy' ]
LOG_COMMAND_SYNONYMS = ['log', 'logs']
EXEC_COMMAND_SYNONYMS = [ 'exec' ]
PORT_FORWARD_COMMAND_SYNONYMS = ['forward', 'port-forward']
CREATE_USER_SYNONYMS = ['create-user', 'user']
LOAD_SYNONYMS = ['load']

p = argparse.ArgumentParser()
subparsers = p.add_subparsers(dest='command')

for command in DEPLOY_COMMAND_SYNONYMS:
    sp = subparsers.add_parser(command)
    sp.add_argument("-o", "--output-dir", help="output directory for deployment files and logs")
    sp.add_argument("-f", "--force", action="store_true", help="force all steps, including docker image re-build")
    sp.add_argument("label", choices=DEPLOYMENT_LABELS, help="whether to deploy to DEV or to PROD")
    sp.add_argument("resource", nargs="?", help="if specified, only this specific resource will be deployed", choices=DEPLOYABLE_RESOURCES)

for command in LOG_COMMAND_SYNONYMS:
    sp = subparsers.add_parser(command)
    sp.add_argument("-f", "--stream-log", action="store_true", help="stream the log")
    sp.add_argument("resource", nargs="?", help="show log", choices=DEPLOYABLE_RESOURCES)

for command in EXEC_COMMAND_SYNONYMS:
    sp = subparsers.add_parser(command)
    sp.add_argument("resource", help="execute a command on the specified pod", choices=DEPLOYABLE_RESOURCES)
    sp.add_argument("commandline", help="the command to execute (in quotes)")

for command in PORT_FORWARD_COMMAND_SYNONYMS:
    sp = subparsers.add_parser(command)
    sp.add_argument("resource", nargs="?", help="start port-forwarding for this service, allowing connections via localhost", choices=DEPLOYABLE_RESOURCES)

for command in CREATE_USER_SYNONYMS:
    sp = subparsers.add_parser(command)

for command in LOAD_SYNONYMS:
    sp = subparsers.add_parser(command)
    sp.add_argument('data', choices=['reference-data', 'example-project'])

args = p.parse_args()


# process command-line args
if args.command in LOG_COMMAND_SYNONYMS:
    if args.resource:
        resources = [args.resource]
    else:
        resources = DEPLOYABLE_RESOURCES

    print_log(resources, args.stream_log)

elif args.command in EXEC_COMMAND_SYNONYMS:
    exec_command(args.resource, args.commandline)

elif args.command in PORT_FORWARD_COMMAND_SYNONYMS:
    if args.resource:
        resource_port_pairs = [(args.resource, PORTS[args.resource])]
    else:
        resource_port_pairs = [(r, port) for r, port in PORTS.items()]

    port_forward(resource_port_pairs)

elif args.command in CREATE_USER_SYNONYMS:
    create_user()

elif args.command in LOAD_SYNONYMS:
    if args.data == "example-project":
        load_example_project()


elif args.command in DEPLOY_COMMAND_SYNONYMS:
    deploy(args.label, args.force, resource=args.resource, output_dir=None)
