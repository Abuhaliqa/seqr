# Generated by Django 3.1.6 on 2021-04-20 15:30
from collections import defaultdict
from django.contrib.admin.utils import flatten
from django.db import migrations, models
from django.utils import timezone
import logging
from seqr.utils.logging_utils import log_model_update, log_model_bulk_update

logger = logging.getLogger(__name__)


def _update_tag_type(tag_type, json):
    for field, val in json.items():
        setattr(tag_type, field, val)
    tag_type.last_modified_date = timezone.now()
    log_model_update(logger, tag_type, user=None, update_type='update', update_fields=list(json.keys()) + ['last_modified_date'])
    tag_type.save()

def _bulk_update_tags(tag_type, json, tag_model_q):
    tag_models = tag_model_q.filter(variant_tag_type=tag_type)
    log_model_bulk_update(logger, tag_models, user=None, update_type='update', update_fields=list(json.keys()))
    tag_models.update(**json)
    return tag_models


def _change_tag_type(old_tag_type, new_tag_type, tag_model_q, delete=True):
    _bulk_update_tags(old_tag_type, {'variant_tag_type': new_tag_type}, tag_model_q)
    if delete:
        log_model_update(logger, old_tag_type, user=None, update_type='delete')
        old_tag_type.delete()


def _update_tag_metadata(tag_type, meta_name, tag_model_q, tags_by_saved_variant, new_tag_type=None):
    tag_models = _bulk_update_tags(tag_type, {'metadata': meta_name}, tag_model_q)
    for tag in tag_models:
        tags_by_saved_variant[new_tag_type or tag_type][
            ','.join(map(str, tag.saved_variants.order_by('id').values_list('id', flat=True)))].append(tag)


def merge_project_sanger_tags(apps, schema_editor):
    VariantTagType = apps.get_model("seqr", "VariantTagType")
    VariantTag = apps.get_model("seqr", "VariantTag")
    db_alias = schema_editor.connection.alias
    project_sanger_tag_types = VariantTagType.objects.using(db_alias).filter(name='Sanger in progress')
    if project_sanger_tag_types:
        logger.info('Merging "Sanger in progress" tags from {} projects'.format(len(project_sanger_tag_types)))
        main_tag_type = project_sanger_tag_types[0]
        _update_tag_type(main_tag_type, {'project': None})

        for sanger_tag_type in project_sanger_tag_types[1:]:
            _change_tag_type(sanger_tag_type, main_tag_type, VariantTag.objects.using(db_alias))


SANGER_TAGS = {
    'Send for Sanger validation': 'Send for validation',
    'Sanger in progress': 'Validation in progress',
    'Sanger validated': 'Validated',
    'Sanger did not confirm': 'Validation did not confirm',
    'Sanger troubleshooting': 'Validation troubleshooting',
}
REVERSE_SANGER_TAGS = {v: k for k, v in SANGER_TAGS.items()}

VALIDATION_TAGS = {
    'Test segregation': ('Send for validation', 'Segregation'),
    'Segregation validated': ('Validated', 'Segregation'),
    'Segregation did not confirm': ('Validation did not confirm', 'Segregation'),
    'Validate SV': ('Send for validation', 'SV'),
    'SV validated': ('Validated', 'SV'),
    'SV did not confirm': ('Validation did not confirm', 'SV')
}

def update_validation_tags(apps, schema_editor):
    VariantTagType = apps.get_model("seqr", "VariantTagType")
    VariantTag = apps.get_model("seqr", "VariantTag")
    db_alias = schema_editor.connection.alias
    variant_tag_q = VariantTag.objects.using(db_alias)

    sanger_tag_types = VariantTagType.objects.using(db_alias).filter(project__isnull=True, name__in=SANGER_TAGS.keys())
    if not sanger_tag_types:
        logger.info('No sanger tags found, skipping validation tag migration')
        return

    tag_type_map = {}
    tags_by_saved_variant = defaultdict(lambda: defaultdict(list))
    for tag_type in sanger_tag_types:
        new_name = SANGER_TAGS[tag_type.name]
        _update_tag_type(tag_type, {'name': new_name, 'description': None})
        _update_tag_metadata(tag_type, 'Sanger', variant_tag_q, tags_by_saved_variant)
        tag_type_map[new_name] = tag_type

    validation_tag_types = VariantTagType.objects.using(db_alias).filter(project__isnull=True, name__in=VALIDATION_TAGS.keys())
    for tag_type in validation_tag_types:
        new_name, meta_name = VALIDATION_TAGS[tag_type.name]
        new_tag_type = tag_type_map[new_name]
        _update_tag_metadata(tag_type, meta_name, variant_tag_q, tags_by_saved_variant, new_tag_type=new_tag_type)
        _change_tag_type(tag_type, new_tag_type, variant_tag_q)

    duplicate_tags = [tags for tags in flatten(
        [list(tags_by_types.values()) for tags_by_types in tags_by_saved_variant.values()]) if len(tags) > 1]
    logger.info('Merging {} sets of tags'.format(len(duplicate_tags)))
    for tags in duplicate_tags:
        log_model_update(logger, tags[0], user=None, update_type='update', update_fields=['metadata'])
        tags[0].metadata = ', '.join([t.metadata for t in tags])
        tags[0].save()
        for tag in tags[1:]:
            log_model_update(logger, tag, user=None, update_type='delete')
            tag.delete()


def split_validation_tags(apps, schema_editor):
    VariantTagType = apps.get_model("seqr", "VariantTagType")
    VariantTag = apps.get_model("seqr", "VariantTag")
    db_alias = schema_editor.connection.alias

    duplicate_tags = VariantTag.objects.using(db_alias).filter(metadata__contains=',')
    logger.info('Splitting {} sets of tags'.format(len(duplicate_tags)))
    for tag in duplicate_tags:
        meta_names = tag.metadata.split(', ')
        tag.metadata = meta_names[0]
        tag.save()
        for meta_name in meta_names[1:]:
            tag.pk = None # creates a new object with the same properties as the original model
            tag.guid = tag.guid[:18] + meta_name
            tag.metadata = meta_name
            tag.save()

    sanger_tag_type_lookup = {
        t.name: t for t in VariantTagType.objects.using(db_alias).filter(
        project__isnull=True, name__in=SANGER_TAGS.values())}

    for old_tag_name, (new_tag_name, meta_name) in VALIDATION_TAGS.items():
        tag_type = VariantTagType.objects.using(db_alias).create(name=old_tag_name, guid=old_tag_name)
        tags_q = VariantTag.objects.using(db_alias).filter(metadata=meta_name)
        _change_tag_type(sanger_tag_type_lookup[new_tag_name], tag_type, tags_q, delete=False)

    for name, tag_type in sanger_tag_type_lookup.items():
        _update_tag_type(tag_type, {'name': REVERSE_SANGER_TAGS[name]})


class Migration(migrations.Migration):

    dependencies = [
        ('seqr', '0023_auto_20210304_2315'),
    ]

    operations = [
        migrations.AddField(
            model_name='varianttag',
            name='metadata',
            field=models.TextField(null=True),
        ),
        migrations.RunPython(merge_project_sanger_tags, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(update_validation_tags, reverse_code=split_validation_tags),
    ]
